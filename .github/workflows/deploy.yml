name: Deploy application

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to deploy'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      HOST: testosteron@37.27.51.34
      APP_DIRECTORY: ~/pub/grpc-sso
      SYSTEMD_DIRECTORY: ~/.config/systemd/user/

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag }}
      - name: Check if tag exists
        run: |
          git fetch --all --tags
          if ! git tag | grep -q "^${{ github.event.inputs.tag }}$"; then
            echo "error: Tag '${{ github.event.inputs.tag }}' not found"
            exit 1
          fi
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.6
      - name: Build main application
        run: |
          go mod download
          go build -o app-bin ./cmd/sso
      - name: Build migrator tool
        run: |
          go build -o migrator ./cmd/migrator
      - name: Install croc
        run: |
          curl https://getcroc.schollz.com | bash
      #      - name: Archive application and migrator
      #        run: |
      #          tar cvf app.tar app-bin
      #          tar cvf migrator.tar migrator
      - name: Upload application to server
        run: |
          #          sudo apt-get install -y ssh
          echo "$DEPLOY_SSH_KEY" > ssh_key.pem
          chmod 600 ssh_key.pem
          
          ssh -i ssh_key.pem -o StrictHostKeyChecking=no ${{ env.HOST }} "mkdir -p ${{ env.APP_DIRECTORY }}"
          
          export CROC_SECRET="${{ env.CROC_CODE_PHRASE }}"
          croc send app-bin migrator config migrations .gitignore Makefile
          ssh -i deploy_key.pem -o StrictHostKeyChecking=no ${{ env.HOST }} "croc --classic --overwrite ${{env.CROC_CODE_PHRASE}} ${{ env.APP_DIRECTORY }}"
        #          scp -i ssh_key.pem -o StrictHostKeyChecking=no app.tar ${{ env.HOST }}:/tmp/app.tar
        #          scp -i ssh_key.pem -o StrictHostKeyChecking=no migrator.tar ${{ env.HOST }}:/tmp/migrator.tar
        #
        #          ssh -i ssh_key.pem -o StrictHostKeyChecking=no ${{ env.HOST }} "tar xvf /tmp/migrator.tar -C ${{ env.APP_DIRECTORY }}"
        #          rsync -avz -e 'ssh -i ssh_key.pem -o StrictHostKeyChecking=no' --exclude='.git' ./ ${{ env.HOST }}:${{ env.APP_DIRECTORY }}
        #          rsync -avz -e 'ssh -i ssh_key.pem -o StrictHostKeyChecking=no' ./migrator ${{ env.HOST }}:${{ env.APP_DIRECTORY }}/migrator
        env:
          DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
          CROC_CODE_PHRASE: ${{ secrets.CROC_CODE_PHRASE }}
      - name: Remove deprecated systemd service file
        run: |
          ssh -i ssh_key.pem -o StrictHostKeyChecking=no ${{ env.HOST }} "rm -f ${{ env.SYSTEMD_DIRECTORY }}/grpc-sso.service"
      - name: Copy systemd service file
        run: |
          scp -i ssh_key.pem -o StrictHostKeyChecking=no ${{ github.workspace }}/config/grpc-sso.service ${{ env.HOST }}:${{ env.SYSTEMD_DIRECTORY }}/grpc-sso.service
      - name: Apply migrations
        run: |
          # ssh -i ssh_key.pem -o StrictHostKeyChecking=no ${{ env.HOST }} "mkdir -p ${{ env.APP_DIRECTORY }}/migrations"
          # ssh -i ssh_key.pem -o StrictHostKeyChecking=no ${{ env.HOST }} "ls -la ${{ env.APP_DIRECTORY }}/migrati 
          # tar cvf migrations.tar ./migrations
          # scp -i ssh_key.pem -o StrictHostKeyChecking=no migrations.tar ${{ env.HOST }}:/tmp/migrations.tar
          # ssh -i ssh_key.pem -o StrictHostKeyChecking=no ${{ env.HOST }} "tar xvf /tmp/migrations.tar -C ${{ env.APP_DIRECTORY }}/migrations"
          
               ssh -i ssh_key.pem -o StrictHostKeyChecking=no ${{ env.HOST }} "${{ env.APP_DIRECTORY }}/migrator --database-path=sso.db --migrations-path=migrations"

      - name: Start application
        run: |
          ssh -i ssh_key.pem -o StrictHostKeyChecking=no ${{ env.HOST }} "systemctl --user daemon-reload && systemctl --user enable grpc-sso.service && systemctl --user start grpc-sso.service"